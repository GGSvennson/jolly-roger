<ui:composition xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      template="../../../templates/ui.xhtml">

    <ui:define name="content">
        
        <h3 class="ui-widget ui-widget-header ui-corner-all submenu-title" style="margin-top:2px"><h:outputText value="#{msgs['ui.src.admin.departments.source']}" /></h3>
        <p:tabView>
            <p:tab title="departments.xhtml">
                <pre name="code" class="brush:xml">

    &lt;ui:define name="content"&gt;
        &lt;h:form id="departmentListForm" rendered="\#{loginBean.user.roles eq loginBean.roleAdmin}" &gt;
            &lt;p:growl id="growl" showDetail="true" /&gt;
            &lt;p:dataTable id="dataTable" value="\#{departmentBean.departments}" widgetVar="departmentsDataTable"
                         var="department" paginator="true" rows="3"
                         rowKey="\#{department.departmentId}" selectionMode="single" selection="\#{departmentBean.selectedDepartment}"
                         paginatorTemplate="{CurrentPageReport}  {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"
                         lazy="false" rowsPerPageTemplate="3,4,5"&gt;
                &lt;p:ajax event="rowSelect" listener="\#{departmentBean.changeDepartment}" update=":departmentDetailForm:displayDepartmentDetail  :deleteDepartmentForm:deleteDepartmentPanelGrid" process="dataTable"/&gt;
                &lt;f:facet name="header"&gt;
                    &lt;h:outputText value="\#{msgs['ui.logic.departments.datatable.select.row']}" /&gt;
                &lt;/f:facet&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="\#{msgs['ui.logic.departments.datatable.name']}"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{department.departmentName}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;f:facet name="footer"&gt;
                    &lt;p:commandButton value="\#{msgs['ui.logic.departments.datatable.footer.new.department']}" onclick="PF('createDepartment').show();" icon="ui-icon-star" /&gt;
                    &lt;p:commandButton value="\#{msgs['ui.logic.departments.datatable.footer.edit.department']}" actionListener="\#{departmentBean.openEditDepartmentDialog}" update=":departmentListForm:growl" icon="ui-icon-arrowrefresh-1-w" /&gt;
                    &lt;p:commandButton value="\#{msgs['ui.logic.departments.datatable.footer.delete.department']}" actionListener="\#{departmentBean.openDeleteDepartmentDialog}" update=":departmentListForm:growl" icon="ui-icon-trash"/&gt;
                    &lt;p:commandButton value="\#{msgs['ui.logic.departments.datatable.footer.show.employees']}" actionListener="\#{departmentBean.showEmployees}" update=":departmentListForm:employeesFromDepartment :departmentListForm:growl" icon="ui-icon-arrowrefresh-1-w" /&gt;
                &lt;/f:facet&gt;
            &lt;/p:dataTable&gt;
        
            &lt;br/&gt;
        
            &lt;p:dataTable id="employeesFromDepartment" value="\#{departmentBean.selectedEmployees}" widgetVar="employeesDataTable"
                         var="employee" paginator="true" rows="3"
                         paginatorTemplate="{CurrentPageReport}  {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"
                         lazy="false" rowsPerPageTemplate="3,4,5"&gt;
                &lt;f:facet name="header"&gt;
                    &lt;h:outputText value="\#{msgs['ui.logic.departments.datatable.employees.header']} \#{departmentBean.deptName}" /&gt;
                &lt;/f:facet&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="\#{msgs['ui.logic.departments.datatable.employees.name']}"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.name}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="\#{msgs['ui.logic.departments.datatable.employees.job.role']}"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.jobRole}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="\#{msgs['ui.logic.departments.datatable.employees.insert.time']}"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.insertTime}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
            &lt;/p:dataTable&gt;
        &lt;/h:form&gt;
        
        &lt;p:dialog id="deleteDialog" header="\#{msgs['ui.logic.departments.delete.department.header']}" widgetVar="deleteDepartment" &gt;
            &lt;h:form id="deleteDepartmentForm"&gt;
                &lt;p:growl id="deleteMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="deleteDepartmentPanelGrid" columns="1" style="margin:0 auto;"&gt;
                    &lt;h:outputText value="\#{msgs['ui.logic.departments.delete.department.delete']} \#{departmentBean.selectedDepartment.departmentName}?" /&gt;
                    &lt;p:panelGrid id="acceptCancelPanelGrid" columns="2" style="margin:0 auto;"&gt;
                        &lt;p:commandButton value="\#{msgs['ui.logic.departments.delete.department.button.delete']}" actionListener="\#{departmentBean.deleteDepartment}" onclick="PF('deleteDepartment').hide()" update=":deleteDepartmentForm:deleteMessage" icon="ui-icon-trash"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterDelete();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterDelete"
                                             actionListener="\#{departmentBean.updateData()}" update=":departmentListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="\#{msgs['ui.logic.departments.delete.department.button.cancel']}" onclick="PF('deleteDepartment').hide()" icon="ui-icon-circle-close"/&gt;
                    &lt;/p:panelGrid&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;
        
        &lt;p:dialog id="editDialog" header="\#{msgs['ui.logic.departments.edit.department.header']}" widgetVar="editDepartment"&gt;
            &lt;h:form id="departmentDetailForm"&gt;
                &lt;p:growl id="editMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="displayDepartmentDetail" columns="2" style="margin:0 auto;"&gt;
                    &lt;h:outputText value="\#{msgs['ui.logic.departments.edit.department.name']}"/&gt;
                    &lt;h:inputText value="\#{departmentBean.selectedDepartment.departmentName}" /&gt;

                    &lt;f:facet name="footer"&gt;
                        &lt;p:commandButton value="\#{msgs['ui.logic.departments.edit.department.footer.button.save']}" update="editMessage" process="departmentDetailForm"
                                         action="\# {departmentBean.editDepartmentFromDialog}" icon="ui-icon-disk"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterEdit();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterEdit"
                                             actionListener="\#{departmentBean.updateData}"
                                update=":departmentListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="\#{msgs['ui.logic.departments.edit.department.footer.button.cancel']}" onclick="PF('editDepartment').hide()" icon="ui-icon-circle-close"/&gt;
                    &lt;/f:facet&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;

        &lt;p:dialog id="createDialog" header="\#{msgs['ui.logic.departments.create.department.header']}" widgetVar="createDepartment"&gt;
            &lt;h:form id="newDepartmentForm"&gt;
                &lt;p:growl id="createMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="displayNewDepartment" columns="2" style="margin:0 auto;"&gt;

                    &lt;h:outputLabel for="dnm" value="\#{msgs['ui.logic.departments.create.department.name']}"/&gt;
                    &lt;p:inputText id="dnm" value="\#{departmentBean.newDepartment.departmentName}" /&gt;
                    
                    &lt;f:facet name="footer"&gt;
                        &lt;p:commandButton value="\#{msgs['ui.logic.departments.create.department.footer.button.save']}" update="createMessage" process="newDepartmentForm"  
                                         action="\#{departmentBean.createDepartmentFromDialog}" icon="ui-icon-disk"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterDelete();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterCreate"
                                             actionListener="\#{departmentBean.updateData}"
                                update=":departmentListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="\#{msgs['ui.logic.departments.create.department.footer.button.cancel']}" onclick="PF('createDepartment').hide()" icon="ui-icon-circle-close"/&gt;
                    &lt;/f:facet&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;
        
    &lt;/ui:define&gt;
                        
                </pre>
            </p:tab>

            <p:tab title="DepartmentBean.java">
                <pre name="code" class="brush:java">

import com.primefaces.hibernate.criteria.dao.DepartmentDAO;
import com.primefaces.hibernate.criteria.dao.EmployeesDAO;
import com.primefaces.hibernate.model.Department;
import com.primefaces.hibernate.model.Employees;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.SelectEvent;

@ManagedBean(name = "departmentBean")
@ViewScoped
public class DepartmentBean implements Serializable {
    
    private static final long serialVersionUID = 1L;
    
    private List&lt;Department&gt; departments = new ArrayList&lt;&gt;();
    private Department newDepartment = new Department();
    private Department selectedDepartment = new Department();
    private List&lt;Employees&gt; selectedEmployees = new ArrayList&lt;&gt;();
    private String deptName;
    
    private DepartmentDAO departmentDAO;
    private EmployeesDAO employeesDAO;
    
    @ManagedProperty(value="#{resourceBundleBean}")
    private ResourceBundleBean resourceBundleBean;
    
    public DepartmentBean() {
    }
    
    @PostConstruct
    public void init() {
        departmentDAO = new DepartmentDAO();
        employeesDAO = new EmployeesDAO();
        
        departments = departmentDAO.list();
    }
    
    public void checkDepartmentName() {
        Department dpt = departmentDAO.findByName(newDepartment.getDepartmentName());
        if(null != dpt)
            if(dpt.getDepartmentName().equals("Administration"))
                FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage(
                            ResourceBundleBean.getResourceBundleString("DepartmentBean.check.department.name")
                    ));
    }
    
    public void createDepartmentFromDialog() {
        if("".equals(newDepartment.getDepartmentName()))
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage(
                        ResourceBundleBean.getResourceBundleString("DepartmentBean.create.department.from.dialog.name.is.required")
                ));
        else {
            Department dpt = departmentDAO.findByName(newDepartment.getDepartmentName());
            
            if(null != dpt)
                FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage(
                            ResourceBundleBean.getResourceBundleString("DepartmentBean.create.department.from.dialog.name.already.exists")
                    ));
            else {
                departmentDAO.create(newDepartment);

                RequestContext rc = RequestContext.getCurrentInstance();
                rc.execute("PF('createDepartment').hide()");

                FacesContext.getCurrentInstance().addMessage(null,
                        new FacesMessage(
                                ResourceBundleBean.getResourceBundleString("DepartmentBean.create.department.from.dialog.department.created")
                        ));

                newDepartment = new Department();
            }
        }
    }
    
    public void openEditDepartmentDialog() {
        if(null == selectedDepartment) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage(
                        ResourceBundleBean.getResourceBundleString("DepartmentBean.open.edit.department.dialog.select.row")
                ));
        } else if(selectedDepartment.getDepartmentName().equals("Administration")) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage(
                        ResourceBundleBean.getResourceBundleString("DepartmentBean.open.edit.department.dialog.administration.department.edited")
                ));
        } else {
            // PF('editDepartment').show()
            RequestContext rc = RequestContext.getCurrentInstance();
            rc.execute("PF('editDepartment').show()");
        }    
    }
    
    public void editDepartmentFromDialog() {
        if(selectedEmployees.size() &gt; 0)
            selectedDepartment.setEmployees(selectedEmployees);
        
        departmentDAO.update(selectedDepartment);
        
        RequestContext rc = RequestContext.getCurrentInstance();
        rc.execute("PF('editDepartment').hide()");
        
        FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage(
                        ResourceBundleBean.getResourceBundleString("DepartmentBean.edit.department.from.dialog.department.updated")
                ));
    }
    
    public void openDeleteDepartmentDialog() {
        if(null == selectedDepartment)
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage(
                        ResourceBundleBean.getResourceBundleString("DepartmentBean.open.delete.department.dialog.select.row")
                ));
        else {
            String depmtName = selectedDepartment.getDepartmentName();
            if("Administration".equals(depmtName))
                FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage(
                            ResourceBundleBean.getResourceBundleString("DepartmentBean.open.delete.department.dialog.administration.department.deleted")
                    ));
            else {
                // PF('deleteDepartment').show()
                RequestContext rc = RequestContext.getCurrentInstance();
                rc.execute("PF('deleteDepartment').show()");
            }
        }
    }
    
    public void deleteDepartment() {
        departmentDAO.delete(selectedDepartment);

        FacesContext.getCurrentInstance().addMessage(null,
            new FacesMessage(
                    ResourceBundleBean.getResourceBundleString("DepartmentBean.open.delete.department.dialog.department.deleted")
            ));

        selectedDepartment = new Department();
    }
    
    public void showDepartments() {
        if(departments.isEmpty()) {
            departments = departmentDAO.list();
        }
    }
    
    public void updateData() {
        departments.clear();
        departments = departmentDAO.list();
    }
    
    public void changeDepartment(SelectEvent event) {
        selectedDepartment = (Department) event.getObject();
        deptName = "( " + selectedDepartment.getDepartmentName() + " )";
    }
    
    public void showEmployees() {
        if(null == selectedDepartment) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage(
                        ResourceBundleBean.getResourceBundleString("DepartmentBean.show.employees.select.row")
                ));
        } else {
            selectedEmployees = employeesDAO.findFromDepartment(selectedDepartment);
        }
        selectedDepartment = new Department();
    }
    
    public Department getNewDepartment() {
        return newDepartment;
    }

    public void setNewDepartment(Department newDepartment) {
        this.newDepartment = newDepartment;
    }

    public Department getSelectedDepartment() {
        return selectedDepartment;
    }

    public void setSelectedDepartment(Department selectedDepartment) {
        this.selectedDepartment = selectedDepartment;
    }

    public List&lt;Department&gt; getDepartments() {
        return departments;
    }

    public void setDepartments(List&lt;Department&gt; departments) {
        this.departments = departments;
    }

    public List&lt;Employees&gt; getSelectedEmployees() {
        return selectedEmployees;
    }

    public void setSelectedEmployees(List&lt;Employees&gt; selectedEmployees) {
        this.selectedEmployees = selectedEmployees;
    }

    public String getDeptName() {
        return deptName;
    }

    public void setDeptName(String deptName) {
        this.deptName = deptName;
    }

    public DepartmentDAO getDepartmentDAO() {
        return departmentDAO;
    }

    public EmployeesDAO getEmployeesDAO() {
        return employeesDAO;
    }

    public ResourceBundleBean getResourceBundleBean() {
        return resourceBundleBean;
    }

    public void setResourceBundleBean(ResourceBundleBean resourceBundleBean) {
        this.resourceBundleBean = resourceBundleBean;
    }
}
                        
                    </pre>
                </p:tab>
            </p:tabView>
        
    </ui:define>

</ui:composition>