<<<<<<< HEAD
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      template="../../../templates/ui.xhtml">

    <ui:define name="content">
        
        <h3 class="ui-widget ui-widget-header ui-corner-all submenu-title" style="margin-top:2px">Source</h3>
            <p:tabView>
                <p:tab title="employees.xhtml">
                    <pre name="code" class="brush:xml">

        &lt;h:form id="employeeListForm" rendered="\#{loginBean.user.roles eq loginBean.roleAdmin}" &gt;
            &lt;p:growl id="growl" showDetail="true" /&gt;
            &lt;p:dataTable id="dataTable" value="\#{userBean.employees}" widgetVar="employeesDataTable"
                         var="employee" paginator="true" rows="5"
                         rowKey="\#{employee.id}" selectionMode="single" selection="\#{userBean.selectedEmployee}"
                         paginatorTemplate="{CurrentPageReport}  {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"
                         lazy="false" rowsPerPageTemplate="5,10,15"&gt;
                &lt;p:ajax event="rowSelect" listener="\#{userBean.changeEmployee}" update=":employeeListForm:growl :employeeDetailForm:displayEmployeeDetail :deleteEmployeeForm:deleteEmployeePanelGrid" process="dataTable"/&gt;
                &lt;f:facet name="header"&gt;
                    Employees - Click on a row to select an employee
                &lt;/f:facet&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Name"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.name}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Department"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.department.departmentName}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Job Role"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.jobRole}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Inserte Date"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.insertTime}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;f:facet name="footer"&gt;
                    &lt;p:commandButton value="New Employee" onclick="PF('createEmployee').show();" icon="ui-icon-star" title="Create new employee"/&gt;
                    &lt;p:commandButton value="Edit Employee" actionListener="\#{userBean.openEditEmployeeDialog}"
                                     update=":employeeListForm:growl" title="Edit Employee" icon="ui-icon-arrowrefresh-1-w" &gt;
                    &lt;/p:commandButton&gt;
                    &lt;p:commandButton value="Delete Employee" onclick="PF('deleteEmployee').show();" icon="ui-icon-trash"/&gt;
                &lt;/f:facet&gt;
            &lt;/p:dataTable&gt;
            
            &lt;br/&gt;
            
            &lt;p:panelGrid id="logoutPanelGrid" columns="1" style="margin:0 auto;"&gt;
                &lt;f:facet name="header"&gt;
                    Logout
                &lt;/f:facet&gt;
                &lt;p:commandButton value="Logout" action="\#{loginBean.logout}" ajax="false" icon="ui-icon-check" /&gt;
            &lt;/p:panelGrid&gt;
        &lt;/h:form&gt;
        
        &lt;p:dialog id="deleteDialog" header="Delete Employee" widgetVar="deleteEmployee" &gt;
            &lt;h:form id="deleteEmployeeForm"&gt;
                &lt;p:growl id="deleteMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="deleteEmployeePanelGrid" columns="1" style="margin:0 auto;"&gt;
                    &lt;h:outputText value="Delete \#{userBean.selectedEmployee.name}?"&gt;&lt;/h:outputText&gt;
                    &lt;p:panelGrid id="acceptCancelPanelGrid" columns="2" style="margin:0 auto;"&gt;
                        &lt;p:commandButton value="Delete Employee" actionListener="\#{userBean.deleteEmployee}" onclick="PF('deleteEmployee').hide()" update=":deleteEmployeeForm:deleteMessage" icon="ui-icon-trash"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterDelete();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterDelete"
                                actionListener="\#{userBean.updateData}" update=":employeeListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="Cancel" onclick="PF('deleteEmployee').hide()" icon="ui-icon-circle-close"/&gt;
                    &lt;/p:panelGrid&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;
        
        &lt;p:dialog id="editDialog" header="Edit Employee" widgetVar="editEmployee" &gt;
            &lt;h:form id="employeeDetailForm"&gt;
                &lt;p:growl id="editMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="displayEmployeeDetail" columns="2" style="margin:0 auto;"&gt;
                    &lt;h:outputText value="Name :"&gt;&lt;/h:outputText&gt;
                    &lt;p:inputText value="\#{userBean.selectedEmployee.name}" /&gt;

                    &lt;h:outputText value="Roles :" /&gt;
                    &lt;h:outputLabel value="\#{userBean.tmpUser.roles}" /&gt;
                    
                    &lt;h:outputText value="Role :"&gt;&lt;/h:outputText&gt;
                    &lt;p:inputText value="\#{userBean.selectedEmployee.jobRole}" /&gt;

                    &lt;p:outputLabel for="button" value="Insert Time :" /&gt;
                    &lt;p:calendar id="button" value="\#{userBean.selectedEmployee.insertTime}" showOn="button" /&gt;

                    &lt;h:outputLabel for="countryList" value="Countries" /&gt;
                    &lt;h:selectOneMenu id="countryList" value="\#{userBean.newCountry}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemValue="\#{userBean.selectedCountry}" itemLabel="\#{userBean.selectedCountry.country}" /&gt;
                        &lt;f:selectItems value="\#{userBean.countries}" var="country" 
                                       itemValue="\#{country}" itemLabel="\#{country.country}"/&gt;
                        &lt;f:ajax listener="\#{userBean.loadCities}" render="cityList" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="cityList" value="Cities" /&gt;
                    &lt;h:selectOneMenu id="cityList" value="\#{userBean.newCity}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemValue="\#{userBean.selectedCity}" itemLabel="\#{userBean.selectedCity.city}" /&gt;
                        &lt;f:selectItems value="\#{userBean.cities}" var="city"
                                       itemValue="\#{city}" itemLabel="\#{city.city}" /&gt;
                        &lt;f:ajax listener="\#{userBean.loadAddresses}" render="addressList" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="addressList" value="Address" /&gt;
                    &lt;h:selectOneMenu id="addressList" value="\#{userBean.newAddress}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemValue="\#{userBean.selectedAddress}" itemLabel="\#{userBean.selectedAddress.address}" /&gt;
                        &lt;f:selectItems value="\#{userBean.addresses}" var="address"
                                       itemValue="\#{address}" itemLabel="\#{address.address}" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="departmentList" value="Departments" /&gt;
                    &lt;h:selectOneMenu id="departmentList" value="\#{userBean.newDepartment}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemValue="\#{userBean.selectedDepartment}" itemLabel="\#{userBean.selectedDepartment.departmentName}" /&gt;
                        &lt;f:selectItems value="\#{userBean.departments}" var="department"
                                       itemValue="\#{department}" itemLabel="\#{department.departmentName}" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;f:facet name="footer"&gt;
                        &lt;p:commandButton value="Save" update="editMessage" process="employeeDetailForm"
                                         action="\#{userBean.editEmployeeFromDialog}" icon="ui-icon-disk"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterEdit();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterEdit"
                                actionListener="\#{userBean.updateData}"
                                update=":employeeListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="Cancel" actionListener="\#{userBean.closeEditEmployeeDialog}" icon="ui-icon-circle-close"/&gt;
                    &lt;/f:facet&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;  

        &lt;p:dialog id="createDialog" header="Create Employee" widgetVar="createEmployee"&gt;
            &lt;h:form id="newEmployeeForm"&gt;
                &lt;p:growl id="createMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="displayNewEmployee" columns="2" style="margin:0 auto;"&gt;

                    &lt;h:outputLabel for="username" value="Username : *" /&gt;
                    &lt;p:inputText id="username" value="\#{userBean.newUser.username}" &gt;
                        &lt;p:ajax listener="\#{userBean.checkUsername}" event="blur" update="createMessage" /&gt;
                    &lt;/p:inputText&gt;
                    
                    &lt;h:outputLabel for="pwd" value="Password : *" /&gt;
                    &lt;p:password id="pwd" value="\#{userBean.newUser.password}" label="Password" /&gt;

                    &lt;h:outputLabel for="rpwd" value="Repeat Password : *" /&gt;
                    &lt;p:password id="rpwd" value="\#{userBean.password}" /&gt;
                    
                    &lt;h:outputLabel for="userRoles" value="Roles: *" /&gt;
                    &lt;h:selectOneMenu id="userRoles" value="\#{userBean.newUser.roles}" &gt;
                        &lt;f:selectItems value="\#{userBean.roleses}" /&gt;
                    &lt;/h:selectOneMenu&gt;

                    &lt;h:outputLabel for="nm" value="Name : *" /&gt;
                    &lt;p:inputText id="nm" value="\#{userBean.newEmployee.name}" /&gt;

                    &lt;h:outputLabel for="jr" value="Job Role : *" /&gt;
                    &lt;p:inputText id="jr" value="\#{userBean.newEmployee.jobRole}" /&gt;

                    &lt;h:outputLabel for="button" value="Insert Time : *" /&gt;
                    &lt;p:calendar id="button" value="\#{userBean.newEmployee.insertTime}" showOn="button" /&gt;
                    
                    &lt;h:outputLabel for="countryList" value="Countries : *" /&gt;
                    &lt;h:selectOneMenu id="countryList" value="\#{userBean.newCountry}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemLabel="Select country" noSelectionOption="true" /&gt;
                        &lt;f:selectItems value="\#{userBean.countries}" var="country" 
                                       itemValue="\#{country}" itemLabel="\#{country.country}"/&gt;
                        &lt;f:ajax listener="\#{userBean.loadCities}" render="cityList" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="cityList" value="Cities : *" /&gt;
                    &lt;h:selectOneMenu id="cityList" value="\#{userBean.newCity}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemLabel="Select city" noSelectionOption="true" /&gt;
                        &lt;f:selectItems value="\#{userBean.cities}" var="city"
                                       itemValue="\#{city}" itemLabel="\#{city.city}" /&gt;
                        &lt;f:ajax listener="\#{userBean.loadAddresses}" render="addressList" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="addressList" value="Address : *" /&gt;
                    &lt;h:selectOneMenu id="addressList" value="\#{userBean.newAddress}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemLabel="Select address" noSelectionOption="true" /&gt;
                        &lt;f:selectItems value="\#{userBean.addresses}" var="address"
                                       itemValue="\#{address}" itemLabel="\#{address.address}" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="departmentList" value="Departments : *" /&gt;
                    &lt;h:selectOneMenu id="departmentList" value="\#{userBean.newDepartment}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemLabel="Select department" noSelectionOption="true" /&gt;
                        &lt;f:selectItems value="\#{userBean.departments}" var="department"
                                       itemValue="\#{department}" itemLabel="\#{department.departmentName}" /&gt;
                    &lt;/h:selectOneMenu&gt;

                    &lt;f:facet name="footer"&gt;
                        &lt;p:commandButton value="Save" update="createMessage" process="newEmployeeForm"  
                                    action="\#{userBean.createEmployeeFromDialog}" icon="ui-icon-disk"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterDelete();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterCreate"
                                actionListener="\#{userBean.updateData}"
                                update=":employeeListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="Cancel" onclick="PF('createEmployee').hide()" icon="ui-icon-circle-close"/&gt;
                    &lt;/f:facet&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;

                    </pre>
                </p:tab>
                
                <p:tab title="UserBean.java">
                    <pre name="code" class="brush:java">
import com.primefaces.hibernate.criteria.AddressDAO;
import com.primefaces.hibernate.criteria.CityDAO;
import com.primefaces.hibernate.criteria.CountryDAO;
import com.primefaces.hibernate.criteria.DepartmentDAO;
import com.primefaces.hibernate.criteria.EmployeeDAO;
import com.primefaces.hibernate.criteria.UserDAO;
import com.primefaces.hibernate.model.Address;
import com.primefaces.hibernate.model.City;
import com.primefaces.hibernate.model.Country;
import com.primefaces.hibernate.model.Department;
import com.primefaces.hibernate.model.Employees;
import com.primefaces.hibernate.model.Roles;
import java.io.Serializable;

import java.util.ArrayList;
import java.util.List;
 
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import com.primefaces.hibernate.model.Users;
import com.primefaces.hibernate.util.HttpSessionUtil;
import com.primefaces.hibernate.util.LoginConverter;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;
import org.hibernate.SessionFactory;
import org.primefaces.context.RequestContext;
import org.primefaces.event.SelectEvent;

/**
 *
 * @author Administrador
 */
@ManagedBean(name = "userBean")
@ViewScoped
public class UserBean implements Serializable {
    
    private Users newUser = new Users();
    private Employees newEmployee = new Employees();
    private Department newDepartment = new Department();
    private Address newAddress = new Address();
    private City newCity = new City();
    private Country newCountry = new Country();
    private Users selectedUser = new Users();
    private Employees selectedEmployee = new Employees();
    private Department selectedDepartment = new Department();
    private Address selectedAddress = new Address();
    private City selectedCity = new City();
    private Country selectedCountry = new Country();
    private List&lt;Users&gt; users = new ArrayList&lt;&gt;();
    private List&lt;Employees&gt; employees = new ArrayList&lt;&gt;();
    private List&lt;Department&gt; departments = new ArrayList&lt;&gt;();
    private List&lt;Address&gt; addresses = new ArrayList&lt;&gt;();
    private List&lt;City&gt; cities = new ArrayList&lt;&gt;();
    private List&lt;Country&gt; countries = new ArrayList&lt;&gt;();
    private Roles[] roleses;
    
    private Users tmpUser = new Users();
    
    private final Roles roleAdmin = Roles.ADMINISTRATOR;
    private final Roles roleUser = Roles.USER;
    
    private int employeeId;
    
    private String password;
    private String newPassword;
    private String repeatedPassword;
    
    private SessionFactory sessionFactory;
    
    public UserBean() {
    }
    
    @PostConstruct
    public void initUsers() {
        HttpSession session = HttpSessionUtil.getSession(false);
        sessionFactory = (SessionFactory) session.getAttribute("sessionFactory");
        
        selectedUser = (Users) session.getAttribute("user");
        //selectedEmployee = selectedUser.getEmployee();
        
        users = UserDAO.listUsers(sessionFactory);
        
        employees = EmployeeDAO.listEmployees(sessionFactory);
        departments = DepartmentDAO.listDepartmentsExceptAdministration(sessionFactory);
        addresses = AddressDAO.listAddress(sessionFactory);
        cities = CityDAO.listCities(sessionFactory);
        countries = CountryDAO.listCountries(sessionFactory);
    }
    
    public void changePasswordFromDialog() throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if(!LoginConverter.hash256(password).equals(selectedUser.getPassword())) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Employee passwords not matched"));
        } else if(!newPassword.equals(repeatedPassword)) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Employee new password is not correct"));
        } else {
            selectedUser.setPassword(LoginConverter.hash256(newPassword));
            UserDAO.updateUser(sessionFactory, selectedUser);
            
            RequestContext rc = RequestContext.getCurrentInstance();
            rc.execute("PF('changePasswordEmployee').hide()");
        
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Employee password changed"));
        }
    }
    
    public void checkUsername() {
        Users user = UserDAO.findUserByUsername(sessionFactory, newUser.getUsername());
        if(null != user)
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Username already exists"));
    }
    
    public void createEmployeeFromDialog() throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if( ("".equals(newUser.getUsername())) ||
                ("".equals(newUser.getPassword()))
                || ("".equals(password))
                || (null == newUser.getRoles())
                || ("".equals(newEmployee.getName()))
                || ("".equals(newEmployee.getJobRole()))
                || (null == newEmployee.getInsertTime())
                || (null == newCountry)
                || (null == newCity)
                || (null == newAddress)
                || (null == newDepartment) ) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("You can not leave any field empty"));
        } else if(!password.equals(newUser.getPassword()))
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Passwords not match"));
        else {
            UserDAO.addUser(sessionFactory, newAddress, newDepartment, newEmployee, newUser);

            RequestContext rc = RequestContext.getCurrentInstance();
            rc.execute("PF('createEmployee').hide()");

            FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage("Employee: " + newUser.getEmployee().getName() + " created"));

            reset();
        }
    }
    
    public void openEditEmployeeDialog() {
        // PF('editEmployee').show()
        RequestContext rc = RequestContext.getCurrentInstance();
        rc.execute("PF('editEmployee').show()");
    }
    
    public void closeEditEmployeeDialog() {
        reset();
        // PF('editEmployee').hide()
        RequestContext rc = RequestContext.getCurrentInstance();
        rc.execute("PF('editEmployee').hide()");
    }
    
    public void editEmployeeFromDialog() {
        if( ("".equals(selectedEmployee.getName()))
                || ("".equals(selectedEmployee.getJobRole()))
                || (null == selectedEmployee.getInsertTime())
                || (null == newCountry)
                || (null == newCity)
                || (null == newAddress)
                || (null == newDepartment) ) {
            
            FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage("You can not leave any input field empty"));
            
        } else {
            EmployeeDAO.updateEmployee(sessionFactory, selectedEmployee);

            RequestContext rc = RequestContext.getCurrentInstance();
            rc.execute("PF('editEmployee').hide()");

            FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage("Employee: " + selectedEmployee.getName() + " updated"));

            reset();
        }
    }
    
    public void deleteEmployee() {
        if(selectedEmployee.equals(selectedUser.getEmployee())) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("The logged in user can not be deleted"));
        } else {
            String name = selectedEmployee.getName();
            EmployeeDAO.deleteEmployee(sessionFactory, selectedEmployee);
        
            FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage("Employee: " + name + " deleted"));
        
            reset();
        }
    }
    
    public void showEmployees() {
        if(employees.isEmpty())
            employees = EmployeeDAO.listEmployees(sessionFactory);
    }
    
    public void updateData() {
        users.clear();
        employees.clear();
        users = UserDAO.listUsers(sessionFactory);
        employees = EmployeeDAO.listEmployees(sessionFactory);
    }
    
    public void changeEmployee(SelectEvent event) {
        selectedEmployee = (Employees) event.getObject();
        Users user = UserDAO.findUserByEmployee(sessionFactory, selectedEmployee);
        if(user.getRoles() == Roles.USER) {
            tmpUser = user;
            selectedDepartment = DepartmentDAO.findDepartmentOfEmployee(sessionFactory, selectedEmployee);
            Short addressId = AddressDAO.findAddressOfEmployee(sessionFactory, selectedEmployee);
            selectedAddress = AddressDAO.findAddressById(sessionFactory, addressId);
            selectedCity = CityDAO.findCityOfAddress(sessionFactory, selectedAddress);
            selectedCountry = CountryDAO.findCountryOfCity(sessionFactory, selectedCity);
            //openEditEmployeeDialog();
        } else {
            selectedEmployee = new Employees();
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("The admin user can not be edited"));
        }
    }
    
    public void loadCities() {
        cities = CityDAO.findCitiesOfCountry(sessionFactory, newCountry);
    }
    
    public void loadAddresses() {
        addresses = AddressDAO.findAddressesOfCity(sessionFactory, newCity);
    }
    
    private void reset() {
        tmpUser = new Users();
        selectedUser = new Users();
        newUser = new Users();
        selectedEmployee = new Employees();
        newEmployee = new Employees();
        selectedDepartment = new Department();
        newDepartment = new Department();
        selectedAddress = new Address();
        newAddress = new Address();
        selectedCity = new City();
        newCity = new City();
        selectedCountry = new Country();
        newCountry = new Country();
    }
    
    public Users getNewUser() {
        return newUser;
    }

    public void setNewUser(Users newUser) {
        this.newUser = newUser;
    }

    public Users getSelectedUser() {
        return selectedUser;
    }

    public void setSelectedUser(Users selectedUser) {
        this.selectedUser = selectedUser;
    }

    public Employees getSelectedEmployee() {
        return selectedEmployee;
    }

    public void setSelectedEmployee(Employees selectedEmployee) {
        this.selectedEmployee = selectedEmployee;
    }

    public Employees getNewEmployee() {
        return newEmployee;
    }

    public void setNewEmployee(Employees newEmployee) {
        this.newEmployee = newEmployee;
    }

    public Department getNewDepartment() {
        return newDepartment;
    }

    public void setNewDepartment(Department newDepartment) {
        this.newDepartment = newDepartment;
    }

    public Address getNewAddress() {
        return newAddress;
    }

    public void setNewAddress(Address newAddress) {
        this.newAddress = newAddress;
    }

    public Department getSelectedDepartment() {
        return selectedDepartment;
    }

    public void setSelectedDepartment(Department selectedDepartment) {
        this.selectedDepartment = selectedDepartment;
    }

    public Address getSelectedAddress() {
        return selectedAddress;
    }

    public void setSelectedAddress(Address selectedAddress) {
        this.selectedAddress = selectedAddress;
    }

    public City getNewCity() {
        return newCity;
    }

    public void setNewCity(City newCity) {
        this.newCity = newCity;
    }

    public Country getNewCountry() {
        return newCountry;
    }

    public void setNewCountry(Country newCountry) {
        this.newCountry = newCountry;
    }

    public City getSelectedCity() {
        return selectedCity;
    }

    public void setSelectedCity(City selectedCity) {
        this.selectedCity = selectedCity;
    }

    public Country getSelectedCountry() {
        return selectedCountry;
    }

    public void setSelectedCountry(Country selectedCountry) {
        this.selectedCountry = selectedCountry;
    }
    
    public List&lt;Users&gt; getUsers() {
        return users;
    }

    public void setUsers(List&lt;Users&gt; users) {
        this.users = users;
    }

    public List&lt;Employees&gt; getEmployees() {
        return employees;
    }

    public void setEmployees(List&lt;Employees&gt; employees) {
        this.employees = employees;
    }

    public List&lt;Department&gt; getDepartments() {
        return departments;
    }

    public void setDepartments(List&lt;Department&gt; departments) {
        this.departments = departments;
    }

    public List&lt;Address&gt; getAddresses() {
        return addresses;
    }

    public void setAddresses(List&lt;Address&gt; addresses) {
        this.addresses = addresses;
    }

    public List&lt;City&gt; getCities() {
        return cities;
    }

    public void setCities(List&lt;City&gt; cities) {
        this.cities = cities;
    }

    public List&lt;Country&gt; getCountries() {
        return countries;
    }

    public void setCountries(List&lt;Country&gt; countries) {
        this.countries = countries;
    }

    public Roles[] getRoleses() {
        roleses = Roles.values();
        return roleses;
    }

    public void setRoleses(Roles[] roleses) {
        this.roleses = roleses;
    }

    public Users getTmpUser() {
        return tmpUser;
    }

    public void setTmpUser(Users tmpUser) {
        this.tmpUser = tmpUser;
    }

    public Roles getRoleAdmin() {
        return roleAdmin;
    }

    public Roles getRoleUser() {
        return roleUser;
    }

    public int getEmployeeId() {
        return employeeId;
    }

    public void setEmployeeId(int employeeId) {
        this.employeeId = employeeId;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getNewPassword() {
        return newPassword;
    }

    public void setNewPassword(String newPassword) {
        this.newPassword = newPassword;
    }

    public String getRepeatedPassword() {
        return repeatedPassword;
    }

    public void setRepeatedPassword(String repeatedPassword) {
        this.repeatedPassword = repeatedPassword;
    }
    
    public SessionFactory getSessionFactory() {
        return sessionFactory;
    }

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }
    
}
                    </pre>
                </p:tab>
            </p:tabView>
        
        <br/>
            
        <h:form rendered="#{loginBean.user.roles eq loginBean.roleAdmin}">
            <p:panelGrid id="logoutPanelGrid" columns="1" style="margin:0 auto;">
                <f:facet name="header">
                    Logout
                </f:facet>
                <p:commandButton value="Logout" action="#{loginBean.logout}" ajax="false" icon="ui-icon-check" />
            </p:panelGrid>
        </h:form>
        
    </ui:define>

=======
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      template="../../../templates/ui.xhtml">

    <ui:define name="content">
        
        <h3 class="ui-widget ui-widget-header ui-corner-all submenu-title" style="margin-top:2px">Source</h3>
            <p:tabView>
                <p:tab title="employees.xhtml">
                    <pre name="code" class="brush:xml">

        &lt;h:form id="employeeListForm" rendered="\#{loginBean.user.roles eq loginBean.roleAdmin}" &gt;
            &lt;p:growl id="growl" showDetail="true" /&gt;
            &lt;p:dataTable id="dataTable" value="\#{userBean.employees}" widgetVar="employeesDataTable"
                         var="employee" paginator="true" rows="5"
                         rowKey="\#{employee.id}" selectionMode="single" selection="\#{userBean.selectedEmployee}"
                         paginatorTemplate="{CurrentPageReport}  {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"
                         lazy="false" rowsPerPageTemplate="5,10,15"&gt;
                &lt;p:ajax event="rowSelect" listener="\#{userBean.changeEmployee}" update=":employeeListForm:growl :employeeDetailForm:displayEmployeeDetail :deleteEmployeeForm:deleteEmployeePanelGrid" process="dataTable"/&gt;
                &lt;f:facet name="header"&gt;
                    Employees - Click on a row to select an employee
                &lt;/f:facet&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Name"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.name}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Department"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.department.departmentName}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Job Role"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.jobRole}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Inserte Date"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.insertTime}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;f:facet name="footer"&gt;
                    &lt;p:commandButton value="New Employee" onclick="PF('createEmployee').show();" icon="ui-icon-star" title="Create new employee"/&gt;
                    &lt;p:commandButton value="Edit Employee" actionListener="\#{userBean.openEditEmployeeDialog}"
                                     update=":employeeListForm:growl" title="Edit Employee" icon="ui-icon-arrowrefresh-1-w" &gt;
                    &lt;/p:commandButton&gt;
                    &lt;p:commandButton value="Delete Employee" onclick="PF('deleteEmployee').show();" icon="ui-icon-trash"/&gt;
                &lt;/f:facet&gt;
            &lt;/p:dataTable&gt;
            
            &lt;br/&gt;
            
            &lt;p:panelGrid id="logoutPanelGrid" columns="1" style="margin:0 auto;"&gt;
                &lt;f:facet name="header"&gt;
                    Logout
                &lt;/f:facet&gt;
                &lt;p:commandButton value="Logout" action="\#{loginBean.logout}" ajax="false" icon="ui-icon-check" /&gt;
            &lt;/p:panelGrid&gt;
        &lt;/h:form&gt;
        
        &lt;p:dialog id="deleteDialog" header="Delete Employee" widgetVar="deleteEmployee" &gt;
            &lt;h:form id="deleteEmployeeForm"&gt;
                &lt;p:growl id="deleteMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="deleteEmployeePanelGrid" columns="1" style="margin:0 auto;"&gt;
                    &lt;h:outputText value="Delete \#{userBean.selectedEmployee.name}?"&gt;&lt;/h:outputText&gt;
                    &lt;p:panelGrid id="acceptCancelPanelGrid" columns="2" style="margin:0 auto;"&gt;
                        &lt;p:commandButton value="Delete Employee" actionListener="\#{userBean.deleteEmployee}" onclick="PF('deleteEmployee').hide()" update=":deleteEmployeeForm:deleteMessage" icon="ui-icon-trash"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterDelete();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterDelete"
                                actionListener="\#{userBean.updateData}" update=":employeeListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="Cancel" onclick="PF('deleteEmployee').hide()" icon="ui-icon-circle-close"/&gt;
                    &lt;/p:panelGrid&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;
        
        &lt;p:dialog id="editDialog" header="Edit Employee" widgetVar="editEmployee" &gt;
            &lt;h:form id="employeeDetailForm"&gt;
                &lt;p:growl id="editMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="displayEmployeeDetail" columns="2" style="margin:0 auto;"&gt;
                    &lt;h:outputText value="Name :"&gt;&lt;/h:outputText&gt;
                    &lt;p:inputText value="\#{userBean.selectedEmployee.name}" /&gt;

                    &lt;h:outputText value="Roles :" /&gt;
                    &lt;h:outputLabel value="\#{userBean.tmpUser.roles}" /&gt;
                    
                    &lt;h:outputText value="Role :"&gt;&lt;/h:outputText&gt;
                    &lt;p:inputText value="\#{userBean.selectedEmployee.jobRole}" /&gt;

                    &lt;p:outputLabel for="button" value="Insert Time :" /&gt;
                    &lt;p:calendar id="button" value="\#{userBean.selectedEmployee.insertTime}" showOn="button" /&gt;

                    &lt;h:outputLabel for="countryList" value="Countries" /&gt;
                    &lt;h:selectOneMenu id="countryList" value="\#{userBean.newCountry}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemValue="\#{userBean.selectedCountry}" itemLabel="\#{userBean.selectedCountry.country}" /&gt;
                        &lt;f:selectItems value="\#{userBean.countries}" var="country" 
                                       itemValue="\#{country}" itemLabel="\#{country.country}"/&gt;
                        &lt;f:ajax listener="\#{userBean.loadCities}" render="cityList" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="cityList" value="Cities" /&gt;
                    &lt;h:selectOneMenu id="cityList" value="\#{userBean.newCity}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemValue="\#{userBean.selectedCity}" itemLabel="\#{userBean.selectedCity.city}" /&gt;
                        &lt;f:selectItems value="\#{userBean.cities}" var="city"
                                       itemValue="\#{city}" itemLabel="\#{city.city}" /&gt;
                        &lt;f:ajax listener="\#{userBean.loadAddresses}" render="addressList" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="addressList" value="Address" /&gt;
                    &lt;h:selectOneMenu id="addressList" value="\#{userBean.newAddress}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemValue="\#{userBean.selectedAddress}" itemLabel="\#{userBean.selectedAddress.address}" /&gt;
                        &lt;f:selectItems value="\#{userBean.addresses}" var="address"
                                       itemValue="\#{address}" itemLabel="\#{address.address}" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="departmentList" value="Departments" /&gt;
                    &lt;h:selectOneMenu id="departmentList" value="\#{userBean.newDepartment}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemValue="\#{userBean.selectedDepartment}" itemLabel="\#{userBean.selectedDepartment.departmentName}" /&gt;
                        &lt;f:selectItems value="\#{userBean.departments}" var="department"
                                       itemValue="\#{department}" itemLabel="\#{department.departmentName}" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;f:facet name="footer"&gt;
                        &lt;p:commandButton value="Save" update="editMessage" process="employeeDetailForm"
                                         action="\#{userBean.editEmployeeFromDialog}" icon="ui-icon-disk"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterEdit();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterEdit"
                                actionListener="\#{userBean.updateData}"
                                update=":employeeListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="Cancel" actionListener="\#{userBean.closeEditEmployeeDialog}" icon="ui-icon-circle-close"/&gt;
                    &lt;/f:facet&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;  

        &lt;p:dialog id="createDialog" header="Create Employee" widgetVar="createEmployee"&gt;
            &lt;h:form id="newEmployeeForm"&gt;
                &lt;p:growl id="createMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="displayNewEmployee" columns="2" style="margin:0 auto;"&gt;

                    &lt;h:outputLabel for="username" value="Username : *" /&gt;
                    &lt;p:inputText id="username" value="\#{userBean.newUser.username}" &gt;
                        &lt;p:ajax listener="\#{userBean.checkUsername}" event="blur" update="createMessage" /&gt;
                    &lt;/p:inputText&gt;
                    
                    &lt;h:outputLabel for="pwd" value="Password : *" /&gt;
                    &lt;p:password id="pwd" value="\#{userBean.newUser.password}" label="Password" /&gt;

                    &lt;h:outputLabel for="rpwd" value="Repeat Password : *" /&gt;
                    &lt;p:password id="rpwd" value="\#{userBean.password}" /&gt;
                    
                    &lt;h:outputLabel for="userRoles" value="Roles: *" /&gt;
                    &lt;h:selectOneMenu id="userRoles" value="\#{userBean.newUser.roles}" &gt;
                        &lt;f:selectItems value="\#{userBean.roleses}" /&gt;
                    &lt;/h:selectOneMenu&gt;

                    &lt;h:outputLabel for="nm" value="Name : *" /&gt;
                    &lt;p:inputText id="nm" value="\#{userBean.newEmployee.name}" /&gt;

                    &lt;h:outputLabel for="jr" value="Job Role : *" /&gt;
                    &lt;p:inputText id="jr" value="\#{userBean.newEmployee.jobRole}" /&gt;

                    &lt;h:outputLabel for="button" value="Insert Time : *" /&gt;
                    &lt;p:calendar id="button" value="\#{userBean.newEmployee.insertTime}" showOn="button" /&gt;
                    
                    &lt;h:outputLabel for="countryList" value="Countries : *" /&gt;
                    &lt;h:selectOneMenu id="countryList" value="\#{userBean.newCountry}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemLabel="Select country" noSelectionOption="true" /&gt;
                        &lt;f:selectItems value="\#{userBean.countries}" var="country" 
                                       itemValue="\#{country}" itemLabel="\#{country.country}"/&gt;
                        &lt;f:ajax listener="\#{userBean.loadCities}" render="cityList" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="cityList" value="Cities : *" /&gt;
                    &lt;h:selectOneMenu id="cityList" value="\#{userBean.newCity}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemLabel="Select city" noSelectionOption="true" /&gt;
                        &lt;f:selectItems value="\#{userBean.cities}" var="city"
                                       itemValue="\#{city}" itemLabel="\#{city.city}" /&gt;
                        &lt;f:ajax listener="\#{userBean.loadAddresses}" render="addressList" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="addressList" value="Address : *" /&gt;
                    &lt;h:selectOneMenu id="addressList" value="\#{userBean.newAddress}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemLabel="Select address" noSelectionOption="true" /&gt;
                        &lt;f:selectItems value="\#{userBean.addresses}" var="address"
                                       itemValue="\#{address}" itemLabel="\#{address.address}" /&gt;
                    &lt;/h:selectOneMenu&gt;
                    
                    &lt;h:outputLabel for="departmentList" value="Departments : *" /&gt;
                    &lt;h:selectOneMenu id="departmentList" value="\#{userBean.newDepartment}" converter="omnifaces.SelectItemsConverter" &gt;
                        &lt;f:selectItem itemLabel="Select department" noSelectionOption="true" /&gt;
                        &lt;f:selectItems value="\#{userBean.departments}" var="department"
                                       itemValue="\#{department}" itemLabel="\#{department.departmentName}" /&gt;
                    &lt;/h:selectOneMenu&gt;

                    &lt;f:facet name="footer"&gt;
                        &lt;p:commandButton value="Save" update="createMessage" process="newEmployeeForm"  
                                    action="\#{userBean.createEmployeeFromDialog}" icon="ui-icon-disk"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterDelete();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterCreate"
                                actionListener="\#{userBean.updateData}"
                                update=":employeeListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="Cancel" onclick="PF('createEmployee').hide()" icon="ui-icon-circle-close"/&gt;
                    &lt;/f:facet&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;

                    </pre>
                </p:tab>
                
                <p:tab title="UserBean.java">
                    <pre name="code" class="brush:java">
import com.primefaces.hibernate.criteria.AddressDAO;
import com.primefaces.hibernate.criteria.CityDAO;
import com.primefaces.hibernate.criteria.CountryDAO;
import com.primefaces.hibernate.criteria.DepartmentDAO;
import com.primefaces.hibernate.criteria.EmployeeDAO;
import com.primefaces.hibernate.criteria.UserDAO;
import com.primefaces.hibernate.model.Address;
import com.primefaces.hibernate.model.City;
import com.primefaces.hibernate.model.Country;
import com.primefaces.hibernate.model.Department;
import com.primefaces.hibernate.model.Employees;
import com.primefaces.hibernate.model.Roles;
import java.io.Serializable;

import java.util.ArrayList;
import java.util.List;
 
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import com.primefaces.hibernate.model.Users;
import com.primefaces.hibernate.util.HttpSessionUtil;
import com.primefaces.hibernate.util.LoginConverter;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;
import org.hibernate.SessionFactory;
import org.primefaces.context.RequestContext;
import org.primefaces.event.SelectEvent;

/**
 *
 * @author Administrador
 */
@ManagedBean(name = "userBean")
@ViewScoped
public class UserBean implements Serializable {
    
    private Users newUser = new Users();
    private Employees newEmployee = new Employees();
    private Department newDepartment = new Department();
    private Address newAddress = new Address();
    private City newCity = new City();
    private Country newCountry = new Country();
    private Users selectedUser = new Users();
    private Employees selectedEmployee = new Employees();
    private Department selectedDepartment = new Department();
    private Address selectedAddress = new Address();
    private City selectedCity = new City();
    private Country selectedCountry = new Country();
    private List&lt;Users&gt; users = new ArrayList&lt;&gt;();
    private List&lt;Employees&gt; employees = new ArrayList&lt;&gt;();
    private List&lt;Department&gt; departments = new ArrayList&lt;&gt;();
    private List&lt;Address&gt; addresses = new ArrayList&lt;&gt;();
    private List&lt;City&gt; cities = new ArrayList&lt;&gt;();
    private List&lt;Country&gt; countries = new ArrayList&lt;&gt;();
    private Roles[] roleses;
    
    private Users tmpUser = new Users();
    
    private final Roles roleAdmin = Roles.ADMINISTRATOR;
    private final Roles roleUser = Roles.USER;
    
    private int employeeId;
    
    private String password;
    private String newPassword;
    private String repeatedPassword;
    
    private SessionFactory sessionFactory;
    
    public UserBean() {
    }
    
    @PostConstruct
    public void initUsers() {
        HttpSession session = HttpSessionUtil.getSession(false);
        sessionFactory = (SessionFactory) session.getAttribute("sessionFactory");
        
        selectedUser = (Users) session.getAttribute("user");
        //selectedEmployee = selectedUser.getEmployee();
        
        users = UserDAO.listUsers(sessionFactory);
        
        employees = EmployeeDAO.listEmployees(sessionFactory);
        departments = DepartmentDAO.listDepartmentsExceptAdministration(sessionFactory);
        addresses = AddressDAO.listAddress(sessionFactory);
        cities = CityDAO.listCities(sessionFactory);
        countries = CountryDAO.listCountries(sessionFactory);
    }
    
    public void changePasswordFromDialog() throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if(!LoginConverter.hash256(password).equals(selectedUser.getPassword())) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Employee passwords not matched"));
        } else if(!newPassword.equals(repeatedPassword)) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Employee new password is not correct"));
        } else {
            selectedUser.setPassword(LoginConverter.hash256(newPassword));
            UserDAO.updateUser(sessionFactory, selectedUser);
            
            RequestContext rc = RequestContext.getCurrentInstance();
            rc.execute("PF('changePasswordEmployee').hide()");
        
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Employee password changed"));
        }
    }
    
    public void checkUsername() {
        Users user = UserDAO.findUserByUsername(sessionFactory, newUser.getUsername());
        if(null != user)
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Username already exists"));
    }
    
    public void createEmployeeFromDialog() throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if( ("".equals(newUser.getUsername())) ||
                ("".equals(newUser.getPassword()))
                || ("".equals(password))
                || (null == newUser.getRoles())
                || ("".equals(newEmployee.getName()))
                || ("".equals(newEmployee.getJobRole()))
                || (null == newEmployee.getInsertTime())
                || (null == newCountry)
                || (null == newCity)
                || (null == newAddress)
                || (null == newDepartment) ) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("You can not leave any field empty"));
        } else if(!password.equals(newUser.getPassword()))
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Passwords not match"));
        else {
            UserDAO.addUser(sessionFactory, newAddress, newDepartment, newEmployee, newUser);

            RequestContext rc = RequestContext.getCurrentInstance();
            rc.execute("PF('createEmployee').hide()");

            FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage("Employee: " + newUser.getEmployee().getName() + " created"));

            reset();
        }
    }
    
    public void openEditEmployeeDialog() {
        // PF('editEmployee').show()
        RequestContext rc = RequestContext.getCurrentInstance();
        rc.execute("PF('editEmployee').show()");
    }
    
    public void closeEditEmployeeDialog() {
        reset();
        // PF('editEmployee').hide()
        RequestContext rc = RequestContext.getCurrentInstance();
        rc.execute("PF('editEmployee').hide()");
    }
    
    public void editEmployeeFromDialog() {
        if( ("".equals(selectedEmployee.getName()))
                || ("".equals(selectedEmployee.getJobRole()))
                || (null == selectedEmployee.getInsertTime())
                || (null == newCountry)
                || (null == newCity)
                || (null == newAddress)
                || (null == newDepartment) ) {
            
            FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage("You can not leave any input field empty"));
            
        } else {
            EmployeeDAO.updateEmployee(sessionFactory, selectedEmployee);

            RequestContext rc = RequestContext.getCurrentInstance();
            rc.execute("PF('editEmployee').hide()");

            FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage("Employee: " + selectedEmployee.getName() + " updated"));

            reset();
        }
    }
    
    public void deleteEmployee() {
        if(selectedEmployee.equals(selectedUser.getEmployee())) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("The logged in user can not be deleted"));
        } else {
            String name = selectedEmployee.getName();
            EmployeeDAO.deleteEmployee(sessionFactory, selectedEmployee);
        
            FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage("Employee: " + name + " deleted"));
        
            reset();
        }
    }
    
    public void showEmployees() {
        if(employees.isEmpty())
            employees = EmployeeDAO.listEmployees(sessionFactory);
    }
    
    public void updateData() {
        users.clear();
        employees.clear();
        users = UserDAO.listUsers(sessionFactory);
        employees = EmployeeDAO.listEmployees(sessionFactory);
    }
    
    public void changeEmployee(SelectEvent event) {
        selectedEmployee = (Employees) event.getObject();
        Users user = UserDAO.findUserByEmployee(sessionFactory, selectedEmployee);
        if(user.getRoles() == Roles.USER) {
            tmpUser = user;
            selectedDepartment = DepartmentDAO.findDepartmentOfEmployee(sessionFactory, selectedEmployee);
            Short addressId = AddressDAO.findAddressOfEmployee(sessionFactory, selectedEmployee);
            selectedAddress = AddressDAO.findAddressById(sessionFactory, addressId);
            selectedCity = CityDAO.findCityOfAddress(sessionFactory, selectedAddress);
            selectedCountry = CountryDAO.findCountryOfCity(sessionFactory, selectedCity);
            //openEditEmployeeDialog();
        } else {
            selectedEmployee = new Employees();
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("The admin user can not be edited"));
        }
    }
    
    public void loadCities() {
        cities = CityDAO.findCitiesOfCountry(sessionFactory, newCountry);
    }
    
    public void loadAddresses() {
        addresses = AddressDAO.findAddressesOfCity(sessionFactory, newCity);
    }
    
    private void reset() {
        tmpUser = new Users();
        selectedUser = new Users();
        newUser = new Users();
        selectedEmployee = new Employees();
        newEmployee = new Employees();
        selectedDepartment = new Department();
        newDepartment = new Department();
        selectedAddress = new Address();
        newAddress = new Address();
        selectedCity = new City();
        newCity = new City();
        selectedCountry = new Country();
        newCountry = new Country();
    }
    
    public Users getNewUser() {
        return newUser;
    }

    public void setNewUser(Users newUser) {
        this.newUser = newUser;
    }

    public Users getSelectedUser() {
        return selectedUser;
    }

    public void setSelectedUser(Users selectedUser) {
        this.selectedUser = selectedUser;
    }

    public Employees getSelectedEmployee() {
        return selectedEmployee;
    }

    public void setSelectedEmployee(Employees selectedEmployee) {
        this.selectedEmployee = selectedEmployee;
    }

    public Employees getNewEmployee() {
        return newEmployee;
    }

    public void setNewEmployee(Employees newEmployee) {
        this.newEmployee = newEmployee;
    }

    public Department getNewDepartment() {
        return newDepartment;
    }

    public void setNewDepartment(Department newDepartment) {
        this.newDepartment = newDepartment;
    }

    public Address getNewAddress() {
        return newAddress;
    }

    public void setNewAddress(Address newAddress) {
        this.newAddress = newAddress;
    }

    public Department getSelectedDepartment() {
        return selectedDepartment;
    }

    public void setSelectedDepartment(Department selectedDepartment) {
        this.selectedDepartment = selectedDepartment;
    }

    public Address getSelectedAddress() {
        return selectedAddress;
    }

    public void setSelectedAddress(Address selectedAddress) {
        this.selectedAddress = selectedAddress;
    }

    public City getNewCity() {
        return newCity;
    }

    public void setNewCity(City newCity) {
        this.newCity = newCity;
    }

    public Country getNewCountry() {
        return newCountry;
    }

    public void setNewCountry(Country newCountry) {
        this.newCountry = newCountry;
    }

    public City getSelectedCity() {
        return selectedCity;
    }

    public void setSelectedCity(City selectedCity) {
        this.selectedCity = selectedCity;
    }

    public Country getSelectedCountry() {
        return selectedCountry;
    }

    public void setSelectedCountry(Country selectedCountry) {
        this.selectedCountry = selectedCountry;
    }
    
    public List&lt;Users&gt; getUsers() {
        return users;
    }

    public void setUsers(List&lt;Users&gt; users) {
        this.users = users;
    }

    public List&lt;Employees&gt; getEmployees() {
        return employees;
    }

    public void setEmployees(List&lt;Employees&gt; employees) {
        this.employees = employees;
    }

    public List&lt;Department&gt; getDepartments() {
        return departments;
    }

    public void setDepartments(List&lt;Department&gt; departments) {
        this.departments = departments;
    }

    public List&lt;Address&gt; getAddresses() {
        return addresses;
    }

    public void setAddresses(List&lt;Address&gt; addresses) {
        this.addresses = addresses;
    }

    public List&lt;City&gt; getCities() {
        return cities;
    }

    public void setCities(List&lt;City&gt; cities) {
        this.cities = cities;
    }

    public List&lt;Country&gt; getCountries() {
        return countries;
    }

    public void setCountries(List&lt;Country&gt; countries) {
        this.countries = countries;
    }

    public Roles[] getRoleses() {
        roleses = Roles.values();
        return roleses;
    }

    public void setRoleses(Roles[] roleses) {
        this.roleses = roleses;
    }

    public Users getTmpUser() {
        return tmpUser;
    }

    public void setTmpUser(Users tmpUser) {
        this.tmpUser = tmpUser;
    }

    public Roles getRoleAdmin() {
        return roleAdmin;
    }

    public Roles getRoleUser() {
        return roleUser;
    }

    public int getEmployeeId() {
        return employeeId;
    }

    public void setEmployeeId(int employeeId) {
        this.employeeId = employeeId;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getNewPassword() {
        return newPassword;
    }

    public void setNewPassword(String newPassword) {
        this.newPassword = newPassword;
    }

    public String getRepeatedPassword() {
        return repeatedPassword;
    }

    public void setRepeatedPassword(String repeatedPassword) {
        this.repeatedPassword = repeatedPassword;
    }
    
    public SessionFactory getSessionFactory() {
        return sessionFactory;
    }

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }
    
}
                    </pre>
                </p:tab>
            </p:tabView>
        
        <br/>
            
        <h:form rendered="#{loginBean.user.roles eq loginBean.roleAdmin}">
            <p:panelGrid id="logoutPanelGrid" columns="1" style="margin:0 auto;">
                <f:facet name="header">
                    Logout
                </f:facet>
                <p:commandButton value="Logout" action="#{loginBean.logout}" ajax="false" icon="ui-icon-check" />
            </p:panelGrid>
        </h:form>
        
    </ui:define>

>>>>>>> 6a06d0359bb3aa53f4d8274e549eaf3f8c381949
</ui:composition>