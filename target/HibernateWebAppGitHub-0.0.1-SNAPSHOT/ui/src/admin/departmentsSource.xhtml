<ui:composition xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      template="../../../templates/ui.xhtml">

    <ui:define name="content">
        
        <h3 class="ui-widget ui-widget-header ui-corner-all submenu-title" style="margin-top:2px">Source</h3>
            <p:tabView>
                <p:tab title="departments.xhtml">
                    <pre name="code" class="brush:xml">

        &lt;h:form id="departmentListForm" rendered="\#{loginBean.user.roles eq loginBean.roleAdmin}" &gt;
            &lt;p:growl id="growl" showDetail="true" /&gt;
            &lt;p:dataTable id="dataTable" value="\#{departmentBean.departments}" widgetVar="departmentsDataTable"
                         var="department" paginator="true" rows="3"
                         rowKey="\#{department.departmentId}" selectionMode="single" selection="\#{departmentBean.selectedDepartment}"
                         paginatorTemplate="{CurrentPageReport}  {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"
                         lazy="false" rowsPerPageTemplate="3,4,5"&gt;
                &lt;p:ajax event="rowSelect" listener="\#{departmentBean.changeDepartment}" update=":departmentDetailForm:displayDepartmentDetail  :deleteDepartmentForm:deleteDepartmentPanelGrid" process="dataTable"/&gt;
                &lt;f:facet name="header"&gt;
                    Departments - Click on a row to see select a department
                &lt;/f:facet&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Name"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{department.departmentName}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;f:facet name="footer"&gt;
                    &lt;p:commandButton value="New department" onclick="PF('createDepartment').show();" icon="ui-icon-star" title="Create new department"/&gt;
                    &lt;p:commandButton value="Edit department" actionListener="\#{departmentBean.openEditDepartmentDialog}" update=":departmentListForm:growl" title="Edit department" icon="ui-icon-arrowrefresh-1-w" /&gt;
                    &lt;p:commandButton value="Delete department" onclick="PF('deleteDepartment').show();" icon="ui-icon-trash"/&gt;
                    &lt;p:commandButton value="Show employees" actionListener="\#{departmentBean.showEmployees}" title="Show employees" update=":departmentListForm:employeesFromDepartment :departmentListForm:growl" icon="ui-icon-arrowrefresh-1-w" /&gt;
                &lt;/f:facet&gt;
            &lt;/p:dataTable&gt;
        
            &lt;br/&gt;
        
            &lt;p:dataTable id="employeesFromDepartment" value="\#{departmentBean.selectedEmployees}" widgetVar="employeesDataTable"
                         var="employee" paginator="true" rows="3"
                         paginatorTemplate="{CurrentPageReport}  {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"
                         lazy="false" rowsPerPageTemplate="3,4,5"&gt;
                &lt;f:facet name="header"&gt;
                    Employees &lt;h:outputText value="\#{departmentBean.deptName}" rendered="\#{departmentBean.selectedDepartment ne null}" /&gt;
                &lt;/f:facet&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Name"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.name}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Job Role"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.jobRole}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
                &lt;p:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Inserte Date"&gt;&lt;/h:outputText&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="\#{employee.insertTime}"&gt;&lt;/h:outputText&gt;
                &lt;/p:column&gt;
            &lt;/p:dataTable&gt;
        
            &lt;br/&gt;
        
            &lt;p:panelGrid id="logoutPanelGrid" columns="1" style="margin:0 auto;"&gt;
                &lt;f:facet name="header"&gt;
                    Logout
                &lt;/f:facet&gt;
                &lt;p:commandButton value="Logout" action="\#{loginBean.logout}" ajax="false" icon="ui-icon-check" /&gt;
            &lt;/p:panelGrid&gt;
        &lt;/h:form&gt;
        
        &lt;p:dialog id="deleteDialog" header="Delete department" widgetVar="deleteDepartment" &gt;
            &lt;h:form id="deleteDepartmentForm"&gt;
                &lt;p:growl id="deleteMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="deleteDepartmentPanelGrid" columns="1" style="margin:0 auto;"&gt;
                    &lt;h:outputText value="Delete \#{departmentBean.selectedDepartment.departmentName}?" /&gt;
                    &lt;p:panelGrid id="acceptCancelPanelGrid" columns="2" style="margin:0 auto;"&gt;
                        &lt;p:commandButton value="Delete department" actionListener="\#{departmentBean.deleteDepartment}" onclick="PF('deleteDepartment').hide()" update=":deleteDepartmentForm:deleteMessage" icon="ui-icon-trash"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterDelete();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterDelete"
                                             actionListener="\#{departmentBean.updateData()}" update=":departmentListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="Cancel" onclick="PF('deleteDepartment').hide()" icon="ui-icon-circle-close"/&gt;
                    &lt;/p:panelGrid&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;
        
        &lt;p:dialog id="editDialog" header="Edit department" widgetVar="editDepartment"&gt;
            &lt;h:form id="departmentDetailForm"&gt;
                &lt;p:growl id="editMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="displayDepartmentDetail" columns="2" style="margin:0 auto;"&gt;
                    &lt;h:outputText value="Name :"&gt;&lt;/h:outputText&gt;
                    &lt;h:inputText value="\#{departmentBean.selectedDepartment.departmentName}" /&gt;

                    &lt;f:facet name="footer"&gt;
                        &lt;p:commandButton value="Save" update="editMessage" process="departmentDetailForm"
                                         action="\# {departmentBean.editDepartmentFromDialog}" icon="ui-icon-disk"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterEdit();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterEdit"
                                             actionListener="\#{departmentBean.updateData}"
                                update=":departmentListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="Cancel" onclick="PF('editDepartment').hide()" icon="ui-icon-circle-close"/&gt;
                    &lt;/f:facet&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;

        &lt;p:dialog id="createDialog" header="Create department" widgetVar="createDepartment"&gt;
            &lt;h:form id="newDepartmentForm"&gt;
                &lt;p:growl id="createMessage" showDetail="true" /&gt;
                &lt;p:panelGrid id="displayNewDepartment" columns="2" style="margin:0 auto;"&gt;

                    &lt;h:outputLabel for="dnm" value="Department Name : *"/&gt;
                    &lt;p:inputText id="dnm" value="\#{departmentBean.newDepartment.departmentName}" /&gt;
                    
                    &lt;f:facet name="footer"&gt;
                        &lt;p:commandButton value="Save" update="createMessage" process="newDepartmentForm"  
                                         action="\#{departmentBean.createDepartmentFromDialog}" icon="ui-icon-disk"&gt;
                            &lt;p:ajax event="click" oncomplete="updateDataTableAfterDelete();"/&gt;
                            &lt;p:remoteCommand id="remoteCommandDeleteId" name="updateDataTableAfterCreate"
                                             actionListener="\#{departmentBean.updateData}"
                                update=":departmentListForm:dataTable"/&gt;
                        &lt;/p:commandButton&gt;
                        &lt;p:commandButton value="Cancel" onclick="PF('createDepartment').hide()" icon="ui-icon-circle-close"/&gt;
                    &lt;/f:facet&gt;
                &lt;/p:panelGrid&gt;
            &lt;/h:form&gt;
        &lt;/p:dialog&gt;
                        
                    </pre>
                </p:tab>
                
                <p:tab title="DepartmentBean.java">
                    <pre name="code" class="brush:java">

import com.journaldev.hibernate.dao.DepartmentDAO;
import com.journaldev.hibernate.dao.EmployeeDAO;
import com.journaldev.hibernate.model.Department;
import com.journaldev.hibernate.model.Employees;
import com.journaldev.hibernate.util.HttpSessionUtil;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;
import org.hibernate.SessionFactory;
import org.primefaces.context.RequestContext;
import org.primefaces.event.SelectEvent;

@ManagedBean(name = "departmentBean")
@ViewScoped
public class DepartmentBean implements Serializable {
    
    private List&lt;Department&gt; departments = new ArrayList&lt;&gt;();
    private Department newDepartment = new Department();
    private Department selectedDepartment = new Department();
    private List&lt;Employees&gt; selectedEmployees = new ArrayList&lt;&gt;();
    private String deptName;
    
    private SessionFactory sessionFactory;
    
    public DepartmentBean() {
    }
    
    @PostConstruct
    public void init() {
        HttpSession session = HttpSessionUtil.getSession(false);
        sessionFactory = (SessionFactory) session.getAttribute("sessionFactory");
        departments = DepartmentDAO.listDepartments(sessionFactory);
    }
    
    public void createDepartmentFromDialog() {
        if("".equals(newDepartment.getDepartmentName()))
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Department name is required"));
        else {
            Department dpt = DepartmentDAO.findDepartmentByName(sessionFactory, newDepartment.getDepartmentName());
            if(null != dpt)
                FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage("Department name already exists"));
            else {
                DepartmentDAO.addDepartment(sessionFactory, newDepartment);

                RequestContext rc = RequestContext.getCurrentInstance();
                rc.execute("PF('createDepartment').hide()");

                FacesContext.getCurrentInstance().addMessage(null,
                        new FacesMessage("Department: " + newDepartment.getDepartmentName() + " created"));

                newDepartment = new Department();
            }
        }
    }
    
    public void openEditDepartmentDialog() {
        if(null == selectedDepartment) {
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("You have to select a row by clicking on it"));
        } else {
            RequestContext rc = RequestContext.getCurrentInstance();
            rc.execute("PF('editDepartment').show()");
        }    
    }
    
    public void editDepartmentFromDialog() {
        if(selectedEmployees.size() &gt; 0)
            selectedDepartment.setEmployees(selectedEmployees);
        
        DepartmentDAO.updateDepartment(sessionFactory, selectedDepartment);
        
        RequestContext rc = RequestContext.getCurrentInstance();
        rc.execute("PF('editDepartment').hide()");
        
        FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("Department ID: " + selectedDepartment.getDepartmentId() + " updated"));
    }
    
    public void deleteDepartment() {
        if(null == selectedDepartment)
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("You have to select a department"));
        else {
            long id = selectedDepartment.getDepartmentId();

            DepartmentDAO.deleteDepartment(sessionFactory, selectedDepartment);

            FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage("Department ID: " + id + " deleted"));

            selectedDepartment = new Department();
        }
    }
    
    public void showDepartments() {
        if(departments.isEmpty())
            departments = DepartmentDAO.listDepartments(sessionFactory);
    }
    
    public void updateData() {
        departments.clear();
        departments = DepartmentDAO.listDepartments(sessionFactory);
    }
    
    public void changeDepartment(SelectEvent event) {
        selectedDepartment = (Department) event.getObject();
        deptName = "( " + selectedDepartment.getDepartmentName() + " )";
    }
    
    public void showEmployees() {
        if(null == selectedDepartment)
            FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage("You have to select a row by clicking on it"));
        else
            selectedEmployees = EmployeeDAO.findEmployeesInDepartment(sessionFactory, selectedDepartment);
        
        selectedDepartment = new Department();
    }
    
    public Department getNewDepartment() {
        return newDepartment;
    }

    public void setNewDepartment(Department newDepartment) {
        this.newDepartment = newDepartment;
    }

    public Department getSelectedDepartment() {
        return selectedDepartment;
    }

    public void setSelectedDepartment(Department selectedDepartment) {
        this.selectedDepartment = selectedDepartment;
    }

    public List&lt;Department&gt; getDepartments() {
        return departments;
    }

    public void setDepartments(List&lt;Department&gt; departments) {
        this.departments = departments;
    }

    public List&lt;Employees&gt; getSelectedEmployees() {
        return selectedEmployees;
    }

    public void setSelectedEmployees(List&lt;Employees&gt; selectedEmployees) {
        this.selectedEmployees = selectedEmployees;
    }

    public String getDeptName() {
        return deptName;
    }

    public void setDeptName(String deptName) {
        this.deptName = deptName;
    }

    public SessionFactory getSessionFactory() {
        return sessionFactory;
    }

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }
    
}
                        
                    </pre>
                </p:tab>
            </p:tabView>
        
        <br/>
            
        <h:form rendered="#{loginBean.user.roles eq loginBean.roleAdmin}">
            <p:panelGrid id="logoutPanelGrid" columns="1" style="margin:0 auto;">
                <f:facet name="header">
                    Logout
                </f:facet>
                <p:commandButton value="Logout" action="#{loginBean.logout}" ajax="false" icon="ui-icon-check" />
            </p:panelGrid>
        </h:form>
        
    </ui:define>

</ui:composition>